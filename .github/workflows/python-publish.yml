name: Release-Deployment CI

on:
  workflow_dispatch:
  release:
    types: [created]

jobs:

  lint:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.9 ]
        os: [ ubuntu-latest ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install -U pip setuptools
          pip install -r dev-requirements.txt
          pip uninstall -y charset-normalizer
      - name: Install the package
        run: |
          python -m build
          pip install ./dist/*.whl
      - name: Type checking (Mypy)
        run: |
          mypy charset_normalizer
      - name: Import sorting check (isort)
        run: |
          isort --check charset_normalizer
      - name: Code format (Black)
        run: |
          black --check --diff --target-version=py35 charset_normalizer
      - name: Style guide enforcement (Flake8)
        run: |
          flake8 charset_normalizer

  tests:
    runs-on: ${{ matrix.os }}
    needs:
      - lint

    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.6, 3.7, 3.8, 3.9, "3.10", "3.11" ]
        os: [ ubuntu-latest ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install -U pip setuptools
          pip install -r dev-requirements.txt
          pip uninstall -y charset-normalizer
      - name: Install the package
        run: |
          python -m build
          pip install ./dist/*.whl
      - name: Run tests
        run: |
          pytest

  detection_coverage:
    runs-on: ${{ matrix.os }}
    needs:
      - tests

    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.9, "3.10" ]
        os: [ ubuntu-latest ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install -U pip setuptools
          pip install -r dev-requirements.txt
          pip uninstall -y charset-normalizer
      - name: Install the package
        run: |
          python -m build
          pip install ./dist/*.whl
      - name: Clone the complete dataset
        run: |
          git clone https://github.com/Ousret/char-dataset.git
      - name: Coverage WITH preemptive
        run: |
          python ./bin/coverage.py --coverage 97 --with-preemptive
      - name: Coverage WITHOUT preemptive
        run: |
          python ./bin/coverage.py --coverage 95
      - name: BC Coverage (With Chardet)
        run: |
          python ./bin/bc.py --coverage 80

  integration:
    runs-on: ${{ matrix.os }}
    needs:
      - detection_coverage
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.9, "3.10" ]
        os: [ ubuntu-latest ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install -U pip setuptools
          pip install -r dev-requirements.txt
      - name: Remove Chardet & Charset-Normalizer
        run: |
          pip uninstall -y chardet
          pip uninstall -y charset-normalizer
      - name: Install the package
        run: |
          python -m build
          pip install ./dist/*.whl
      - name: Clone the complete dataset
        run: |
          git clone https://github.com/Ousret/char-dataset.git
      - name: Start the Flask server
        run: |
          python ./bin/serve.py &
      - name: Integration Tests with Requests
        run: |
          python ./bin/integration.py
  universal-wheel:
    runs-on: ubuntu-latest
    needs:
      - integration
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Update pip, setuptools, wheel, build and twine
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine build
      - name: Build Wheel
        env:
          CHARSET_NORMALIZER_USE_MYPYC: '0'
        run: python -m build
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

  build-wheels:
    name: Build wheels on ${{ matrix.os }} ${{ matrix.qemu }}
    runs-on: ${{ matrix.os }}-latest
    needs: universal-wheel
    strategy:
      matrix:
        os: [ ubuntu, windows, macos ]
        qemu: [ '' ]
        include:
          # Split ubuntu job for the sake of speed-up
          - os: ubuntu
            qemu: aarch64
          - os: ubuntu
            qemu: ppc64le
          - os: ubuntu
            qemu: s390x
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Set up QEMU
        if: ${{ matrix.qemu }}
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
        id: qemu
      - name: Prepare emulation
        run: |
          if [[ -n "${{ matrix.qemu }}" ]]; then
            # Build emulated architectures only if QEMU is set,
            # use default "auto" otherwise
            echo "CIBW_ARCHS_LINUX=${{ matrix.qemu }}" >> $GITHUB_ENV
          fi
        shell: bash
      - name: Setup Python
        uses: actions/setup-python@v4
      - name: Update pip, wheel, setuptools, build, twine
        run: |
          python -m pip install -U pip wheel setuptools build twine
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.2
        env:
          #CIBW_BUILD_FRONTEND: "build"
          CIBW_ARCHS_MACOS: x86_64 arm64 universal2
          CIBW_ENVIRONMENT: CHARSET_NORMALIZER_USE_MYPYC='1'
          CIBW_BEFORE_BUILD: pip install -r build-requirements.txt
          #CIBW_CONFIG_SETTINGS: "--build-option=--no-isolation"
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest -c {package} {package}/tests
          CIBW_SKIP: pp*
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./wheelhouse/*.whl

  deploy:

    runs-on: ubuntu-latest
    needs:
      - build-wheels

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: Download disctributions
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist
    - name: Collected dists
      run: |
        tree dist
    - name: Publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*
